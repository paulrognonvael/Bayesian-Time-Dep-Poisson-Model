prior_p <- dbeta(p, shape1 = alpha_prior, shape2 = beta_prior)
# likelihood
likelihood_geom <- function(p) {
prod(dgeom(y,p))
}
likelihood_geom_val <- map_dbl(p, ~likelihood_geom(.x))
#
sum(prior_p * likelihood_geom_val) * delta_p
p_sim <- rbeta(10000000, shape1 = alpha_prior, shape2 = beta_prior)
prior_pred_geom <- rgeom(10000000,p_sim)
dprior_pred_geom <- table(prior_pred_geom)/10000000
dprior_pred_geom <- tibble(val = as.numeric(names(dprior_pred_geom)),prob = as.numeric(dprior_pred_geom))
dprior_pred_geom[dprior_pred_geom$val==1,"prob"]*dprior_pred_geom[dprior_pred_geom$val==2,"prob"]*dprior_pred_geom[dprior_pred_geom$val==2,"prob"]*dprior_pred_geom[dprior_pred_geom$val==8,"prob"]*dprior_pred_geom[dprior_pred_geom$val==10,"prob"]
p_sim <- rbeta(1000000, shape1 = alpha_prior, shape2 = beta_prior)
prior_pred_geom <- rgeom(1000000,p_sim)
dprior_pred_geom <- table(prior_pred_geom)/1000000
dprior_pred_geom <- tibble(val = as.numeric(names(dprior_pred_geom)),prob = as.numeric(dprior_pred_geom))
dprior_pred_geom[dprior_pred_geom$val==1,"prob"]*dprior_pred_geom[dprior_pred_geom$val==2,"prob"]*dprior_pred_geom[dprior_pred_geom$val==2,"prob"]*dprior_pred_geom[dprior_pred_geom$val==8,"prob"]*dprior_pred_geom[dprior_pred_geom$val==10,"prob"]
#Poisson model
k_prior = 50
theta_prior = 0.1
support <- tibble(x = c(2,8))
ggplot() +
stat_function(
data = support, mapping = aes(x),
fun = dgamma,
args = list(shape = k_prior, scale = theta_prior),
size = 0.7
) + geom_vline(xintercept = c(4,6),linetype = "dashed") +
xlab("lambda") + ylab("Prior density")
#Geometric model
alpha_prior = 61
beta_prior = 299
support <- tibble(x = c(0.05,0.3))
ggplot() +
stat_function(
data = support, mapping = aes(x),
fun = dbeta,
args = list(shape1 = alpha_prior, shape2 = beta_prior),
size = 0.7
) + geom_vline(xintercept = c(1/7,1/5),linetype = "dashed") +
xlab("p") + ylab("Prior density")
#Geometric model
alpha_prior = 61
beta_prior = 299
support <- tibble(x = c(0.05,0.3))
ggplot() +
stat_function(
data = support, mapping = aes(x),
fun = dbeta,
args = list(shape1 = alpha_prior, shape2 = beta_prior),
size = 0.7
) + geom_vline(xintercept = c(1/7,1/5),linetype = "dashed") +
xlab("p") + ylab("Prior density")
# libraries
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(kableExtra)
#Poisson model
k_prior = 50
theta_prior = 0.1
support <- tibble(x = c(2,8))
ggplot() +
stat_function(
data = support, mapping = aes(x),
fun = dgamma,
args = list(shape = k_prior, scale = theta_prior),
size = 0.7
) + geom_vline(xintercept = c(4,6),linetype = "dashed") +
xlab("lambda") + ylab("Prior density")
#Geometric model
alpha_prior = 61
beta_prior = 299
support <- tibble(x = c(0.05,0.3))
ggplot() +
stat_function(
data = support, mapping = aes(x),
fun = dbeta,
args = list(shape1 = alpha_prior, shape2 = beta_prior),
size = 0.7
) + geom_vline(xintercept = c(1/7,1/5),linetype = "dashed") +
xlab("p") + ylab("Prior density")
delta_lambda <- 0.1
lambda <- seq(0, 1000, delta_p)[-1]
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
#Observed counts
y <- c(1, 2, 2, 8, 10)
delta_lambda <- 0.1
lambda <- seq(0, 1000, delta_p)[-1]
lambda <- seq(0, 1000, delta_lambda)[-1]
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
likelihood_pois <- function(lambda) {
prod(dpois(y,lambda))
}
likelihood_pois_val <- map_dbl(lambda, ~likelihood_pois(.x))
sum(prior_lambda * likelihood_pois_val) * delta_p
sum(prior_lambda * likelihood_pois_val) * delta_lambda
prior_lambda
sum(prior_lambda * likelihood_pois_val) * delta_lambda
lambda_sim <- rgamma(1000000, shape = k_prior, scale = theta_prior)
prior_pred_pois <- rpois(1000000,lambda_sim)
dprior_pred_pois <- table(prior_pred_pois)/1000000
dprior_pred_pois <- tibble(val = as.numeric(names(dprior_pred_pois)),prob = as.numeric(dprior_pred_pois))
sum(prior_lambda * likelihood_pois_val) * delta_lambda
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
delta_lambda <- 0.1
lambda <- seq(0, 1000, delta_lambda)
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
# likelihood
likelihood_pois <- function(lambda) {
prod(dpois(y,lambda))
}
likelihood_pois_val <- map_dbl(lambda, ~likelihood_pois(.x))
sum(prior_lambda * likelihood_pois_val) * delta_lambda
lambda <- seq(0, 10000, delta_lambda)
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
# likelihood
likelihood_pois <- function(lambda) {
prod(dpois(y,lambda))
}
likelihood_pois_val <- map_dbl(lambda, ~likelihood_pois(.x))
sum(prior_lambda * likelihood_pois_val) * delta_lambda
lambda_sim <- rgamma(10000000, shape = k_prior, scale = theta_prior)
prior_pred_pois <- rpois(10000000,lambda_sim)
dprior_pred_pois <- table(prior_pred_pois)/10000000
dprior_pred_pois <- tibble(val = as.numeric(names(dprior_pred_pois)),prob = as.numeric(dprior_pred_pois))
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
delta_lambda <- 0.01
lambda <- seq(0, 1000, delta_lambda)
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
# likelihood
likelihood_pois <- function(lambda) {
prod(dpois(y,lambda))
}
likelihood_pois_val <- map_dbl(lambda, ~likelihood_pois(.x))
sum(prior_lambda * likelihood_pois_val) * delta_lambda
sum(prior_lambda * likelihood_pois_val) * delta_lambda
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
lambda_sim <- rgamma(10000000, shape = k_prior, scale = theta_prior)
prior_pred_pois <- rpois(10000000,lambda_sim)
dprior_pred_pois <- table(prior_pred_pois)/10000000
dprior_pred_pois <- tibble(val = as.numeric(names(dprior_pred_pois)),prob = as.numeric(dprior_pred_pois))
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
max(lambda_sim)
#Observed counts
y <- c(1, 2, 2, 8, 10)
delta_lambda <- 0.01
lambda <- seq(0, 1000, delta_lambda)
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
# likelihood
likelihood_pois <- function(lambda) {
prod(dpois(y,lambda))
}
likelihood_pois_val <- map_dbl(lambda, ~likelihood_pois(.x))
sum(prior_lambda * likelihood_pois_val) * delta_lambda
lambda_sim <- rgamma(10000000, shape = k_prior, scale = theta_prior)
prior_pred_pois <- rpois(10000000,lambda_sim)
dprior_pred_pois <- table(prior_pred_pois)/10000000
dprior_pred_pois <- tibble(val = as.numeric(names(dprior_pred_pois)),prob = as.numeric(dprior_pred_pois))
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]
dprior_pred_pois[dprior_pred_pois$val==2,"prob"]
dprior_pred_pois[dprior_pred_pois$val==8,"prob"]
dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
lambda <- seq(0, 1000, delta_lambda)
lambda <- seq(0.01, 1000, delta_lambda)
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
# likelihood
likelihood_pois <- function(lambda) {
prod(dpois(y,lambda))
}
likelihood_pois_val <- map_dbl(lambda, ~likelihood_pois(.x))
sum(prior_lambda * likelihood_pois_val) * delta_lambda
lambda_sim <- rgamma(10000000, shape = k_prior, scale = theta_prior)
sum(prior_lambda * likelihood_pois_val* delta_lambda)
#### Geometric model
delta_p <- 0.0001
p <- seq(0, 1, delta_p)[-1]
# Prior distribution discreticized
prior_p <- dbeta(p, shape1 = alpha_prior, shape2 = beta_prior)
# likelihood
likelihood_geom <- function(p) {
prod(dgeom(y,p))
}
likelihood_geom_val <- map_dbl(p, ~likelihood_geom(.x))
#
sum(prior_p * likelihood_geom_val) * delta_p
p_sim <- rbeta(1000000, shape1 = alpha_prior, shape2 = beta_prior)
prior_pred_geom <- rgeom(1000000,p_sim)
dprior_pred_geom <- table(prior_pred_geom)/1000000
dprior_pred_geom <- tibble(val = as.numeric(names(dprior_pred_geom)),prob = as.numeric(dprior_pred_geom))
dprior_pred_geom[dprior_pred_geom$val==1,"prob"]*dprior_pred_geom[dprior_pred_geom$val==2,"prob"]*dprior_pred_geom[dprior_pred_geom$val==2,"prob"]*dprior_pred_geom[dprior_pred_geom$val==8,"prob"]*dprior_pred_geom[dprior_pred_geom$val==10,"prob"]
lambda_sim <- rgamma(10000000, shape = k_prior, scale = theta_prior)
prior_pred_pois <- rpois(10000000,lambda_sim)
dprior_pred_pois <- table(prior_pred_pois)/10000000
dprior_pred_pois <- tibble(val = as.numeric(names(dprior_pred_pois)),prob = as.numeric(dprior_pred_pois))
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
table(prior_pred_pois)/10000000
prior_lambda
likelihood_pois_val
dprior_pred_pois
sum(dprior_pred_pois)
sum(dprior_pred_pois$prob)
View(dprior_pred_pois)
#Observed counts
y <- c(1, 2, 2, 8, 10)
delta_lambda <- 0.01
lambda <- seq(0.01, 1000, delta_lambda)
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
# likelihood
likelihood_pois <- function(lambda) {
prod(dpois(y,lambda))
}
likelihood_pois_val <- map_dbl(lambda, ~likelihood_pois(.x))
sum(prior_lambda * likelihood_pois_val* delta_lambda)
2*sum(prior_lambda * likelihood_pois_val* delta_lambda)
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]
lambda_sim <- rgamma(1000000, shape = k_prior, scale = theta_prior)
prior_pred_pois <- rpois(1000000,lambda_sim)
dprior_pred_pois <- table(prior_pred_pois)/1000000
dprior_pred_pois <- tibble(val = as.numeric(names(dprior_pred_pois)),prob = as.numeric(dprior_pred_pois))
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
prior_lambda
sum(prior_lambda * likelihood_pois_val* delta_lambda)
lambda_sim <- rgamma(1000000, shape = k_prior, scale = theta_prior)
prior_pred_pois <- rpois(1000000,lambda_sim)
dprior_pred_pois <- table(prior_pred_pois)/1000000
dprior_pred_pois <- tibble(val = as.numeric(names(dprior_pred_pois)),prob = as.numeric(dprior_pred_pois))
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
#### Geometric model
delta_p <- 0.0001
p <- seq(0, 1, delta_p)[-1]
# Prior distribution discreticized
prior_p <- dbeta(p, shape1 = alpha_prior, shape2 = beta_prior)
# likelihood
likelihood_geom <- function(p) {
prod(dgeom(y,p))
}
likelihood_geom_val <- map_dbl(p, ~likelihood_geom(.x))
#
sum(prior_p * likelihood_geom_val) * delta_p
p_sim <- rbeta(1000000, shape1 = alpha_prior, shape2 = beta_prior)
prior_pred_geom <- rgeom(1000000,p_sim)
dprior_pred_geom <- table(prior_pred_geom)/1000000
dprior_pred_geom <- tibble(val = as.numeric(names(dprior_pred_geom)),prob = as.numeric(dprior_pred_geom))
dprior_pred_geom[dprior_pred_geom$val==1,"prob"]*dprior_pred_geom[dprior_pred_geom$val==2,"prob"]*dprior_pred_geom[dprior_pred_geom$val==2,"prob"]*dprior_pred_geom[dprior_pred_geom$val==8,"prob"]*dprior_pred_geom[dprior_pred_geom$val==10,"prob"]
#Observed counts
y <- c(1, 2, 2, 8, 10)
delta_lambda <- 0.01
lambda <- seq(0.01, 1000000, delta_lambda)
library(devtools)
devtools::install_github("rstudio/keras")
install.packages("devtools")
devtools::install_github("rstudio/keras")
library(kesa)
library(keras)
install_keras()
n
library(reticulate)
py_config()
seq(1:7)*2
log2(2)
log2(2)
setwd("~/Documents/MESIO/Bayesian Analysis/UPC-Final-Project-Bayesian-Analysis/Excess_death/Material_report_2/data/data_france")
library(tidyverse)
library(lubridate)
deces_2010 <- read_delim("deces-2010.csv",
";", escape_double = FALSE, trim_ws = TRUE)
deces_2010 <- deces_2010 %>% select(datedeces) %>%
mutate(death=rep(1,n()),
date = parse_date_time(datedeces,order="ymd"),
year=year(date),
week = week(date)) %>%
filter(year > 2009, week %in% seq(1,16,1))
# 2011
deces_2011 <- read_delim("deces-2011.csv",
";", escape_double = FALSE, trim_ws = TRUE)
deces_2011 <- deces_2011 %>% select(datedeces) %>%
mutate(death=rep(1,n()),
date = parse_date_time(datedeces,order="ymd"),
year=year(date),
week = week(date)) %>%
filter(year > 2009, week %in% seq(1,16,1))
# 2012
deces_2012 <- read_delim("deces-2012.csv",
";", escape_double = FALSE, trim_ws = TRUE)
deces_2012 <- deces_2012 %>% select(datedeces) %>%
mutate(death=rep(1,n()),
date = parse_date_time(datedeces,order="ymd"),
year=year(date),
week = week(date)) %>%
filter(year > 2009, week %in% seq(1,16,1))
# 2013
deces_2013 <- read_delim("deces-2013.csv",
";", escape_double = FALSE, trim_ws = TRUE)
deces_2013 <- deces_2013 %>% select(datedeces) %>%
mutate(death=rep(1,n()),
date = parse_date_time(datedeces,order="ymd"),
year=year(date),
week = week(date)) %>%
filter(year > 2009, week %in% seq(1,16,1))
# 2014
deces_2014 <- read_delim("deces-2014.csv",
";", escape_double = FALSE, trim_ws = TRUE)
deces_2014 <- deces_2014 %>% select(datedeces) %>%
mutate(death=rep(1,n()),
date = parse_date_time(datedeces,order="ymd"),
year=year(date),
week = week(date)) %>%
filter(year > 2009, week %in% seq(1,16,1))
# 2015
deces_2015 <- read_delim("deces-2015.csv",
";", escape_double = FALSE, trim_ws = TRUE)
deces_2015 <- deces_2015 %>% select(datedeces) %>%
mutate(death=rep(1,n()),
date = parse_date_time(datedeces,order="ymd"),
year=year(date),
week = week(date)) %>%
filter(year > 2009, week %in% seq(1,16,1))
# 2016
deces_2016 <- read_delim("deces-2016.csv",
";", escape_double = FALSE, trim_ws = TRUE)
deces_2016 <- deces_2016 %>% select(datedeces) %>%
mutate(death=rep(1,n()),
date = parse_date_time(datedeces,order="ymd"),
year=year(date),
week = week(date)) %>%
filter(year > 2009, week %in% seq(1,16,1))
# 2017
deces_2017 <- read_delim("deces-2017.csv",
";", escape_double = FALSE, trim_ws = TRUE)
deces_2017 <- deces_2017 %>% select(datedeces) %>%
mutate(death=rep(1,n()),
date = parse_date_time(datedeces,order="ymd"),
year=year(date),
week = week(date)) %>%
filter(year > 2009, week %in% seq(1,16,1))
# 2018
deces_2018 <- read_delim("deces-2018.csv",
";", escape_double = FALSE, trim_ws = TRUE)
deces_2018 <- deces_2018 %>% select(datedeces) %>%
mutate(death=rep(1,n()),
date = parse_date_time(datedeces,order="ymd"),
year=year(date),
week = week(date)) %>%
filter(year > 2009, week %in% seq(1,16,1))
# 2019
deces_2019 <- read_delim("deces-2019.csv",
";", escape_double = FALSE, trim_ws = TRUE)
deces_2019 <- deces_2019 %>% select(datedeces) %>%
mutate(death=rep(1,n()),
date = parse_date_time(datedeces,order="ymd"),
year=year(date),
week = week(date)) %>%
filter(year > 2009, week %in% seq(1,16,1))
# 2020
# January
deces_jan2020 <- read_delim("deces-2020-m01.csv",
";", escape_double = FALSE, trim_ws = TRUE)
deces_jan2020 <- deces_jan2020 %>% select(datedeces) %>%
mutate(death=rep(1,n()),
date = parse_date_time(datedeces,order="ymd"),
year=year(date),
week = week(date)) %>%
filter(year > 2009, week %in% seq(1,16,1))
# February
deces_feb2020 <- read_delim("Deces_2020_M02.csv",
";", escape_double = FALSE, trim_ws = TRUE)
deces_feb2020 <- deces_feb2020 %>% select(datedeces) %>%
mutate(death=rep(1,n()),
date = parse_date_time(datedeces,order="ymd"),
year=year(date),
week = week(date)) %>%
filter(year > 2009, week %in% seq(1,16,1))
# March
deces_mar2020 <- read_delim("Deces_2020_M03.csv",
";", escape_double = FALSE, trim_ws = TRUE)
deces_mar2020 <- deces_mar2020 %>% select(datedeces) %>%
mutate(death=rep(1,n()),
date = parse_date_time(datedeces,order="ymd"),
year=year(date),
week = week(date)) %>%
filter(year > 2009, week %in% seq(1,9,1))
# Merge
# Marge of 2010 to 2020
daily_deces_2010_mar2020 <- rbind(deces_2010,deces_2011,deces_2012,
deces_2013,deces_2014,deces_2015,
deces_2016,deces_2017,deces_2018,
deces_2019,deces_jan2020,
deces_feb2020,deces_mar2020)
weekly_deces_2010_mar2020 <- daily_deces_2010_mar2020 %>%
group_by(year,week) %>%
summarise(deaths=sum(death))
weekly_deces_2010_mar2020_2 <- pivot_wider(weekly_deces_2010_mar2020, names_from = "year",
values_from = c("deaths"))
rm(deces_2010,deces_2011,deces_2012,
deces_2013,deces_2014,deces_2015,
deces_2016,deces_2017,deces_2018,
deces_2019,deces_jan2020,
deces_feb2020,deces_mar2020,daily_deces_2010_mar2020)
data_daily_2018_2020 <-read_delim("2020-05-22_deces_quotidiens_departement_csv.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(data_daily_2018_2020)
data_daily_2018_2020 <- data_daily_2018_2020 %>%
filter(Zone == "France") %>% mutate(date = lubridate::dmy(Date_evenement),
week = lubridate::week(date)) %>%
filter(week < 17, week > 9) %>%
mutate(#day_deaths_2018 = c(data_daily_2018_2020$Total_deces_2018[1],diff(Total_deces_2018)),
#day_deaths_2019 = c(data_daily_2018_2020$Total_deces_2019[1],diff(Total_deces_2019)),
`2020` = c(data_daily_2018_2020$Total_deces_2020[1],diff(Total_deces_2020))) %>%
select(week,
#day_deaths_2018,
#day_deaths_2019,
`2020`)
data_daily_2018_2020 <- data_daily_2018_2020 %>%
filter(Zone == "France") %>% mutate(date = lubridate::dmy(Date_evenement),
week = lubridate::week(date)) %>%
filter(week < 17, week > 9) %>%
mutate(#day_deaths_2018 = c(data_daily_2018_2020$Total_deces_2018[1],diff(Total_deces_2018)),
#day_deaths_2019 = c(data_daily_2018_2020$Total_deces_2019[1],diff(Total_deces_2019)),
`2020` = c(data_daily_2018_2020$Total_deces_2020[1],diff(Total_deces_2020))) %>%
select(week,
#day_deaths_2018,
#day_deaths_2019,
`2020`)
data_daily_2018_2020 <- read_delim("2020-05-22_deces_quotidiens_departement_csv.csv",
";", escape_double = FALSE, trim_ws = TRUE)
data_daily_2018_2020 <- data_daily_2018_2020 %>%
filter(Zone == "France") %>% mutate(date = lubridate::dmy(Date_evenement),
week = lubridate::week(date)) %>%
filter(week < 17, week > 9) %>%
mutate(#day_deaths_2018 = c(data_daily_2018_2020$Total_deces_2018[1],diff(Total_deces_2018)),
#day_deaths_2019 = c(data_daily_2018_2020$Total_deces_2019[1],diff(Total_deces_2019)),
`2020` = c(data_daily_2018_2020$Total_deces_2020[1],diff(Total_deces_2020))) %>%
select(week,
#day_deaths_2018,
#day_deaths_2019,
`2020`)
data_daily_2018_2020 <- read_delim("2020-05-22_deces_quotidiens_departement_csv.csv",
";", escape_double = FALSE, trim_ws = TRUE)
data_daily_2018_2020 <- data_daily_2018_2020 %>%
filter(Zone == "France") %>% mutate(date = lubridate::dmy(Date_evenement),
week = lubridate::week(date))
data_daily_2018_2020 <- read_delim("2020-05-22_deces_quotidiens_departement_csv.csv",
";", escape_double = FALSE, trim_ws = TRUE)
data_daily_2018_2020 <- data_daily_2018_2020 %>%
filter(Zone == "France") %>% mutate(date = lubridate::dmy(Date_evenement),
week = lubridate::week(date))
View(data_daily_2018_2020)
library(lubridate)
data_daily_2018_2020 <- read_delim("2020-05-22_deces_quotidiens_departement_csv.csv",
";", escape_double = FALSE, trim_ws = TRUE)
data_daily_2018_2020 <- data_daily_2018_2020 %>%
filter(Zone == "France") %>% mutate(date = lubridate::dmy(Date_evenement),
week = lubridate::week(date))
data_daily_2018_2020 <- read_delim("2020-05-22_deces_quotidiens_departement_csv.csv",
";", escape_double = FALSE, trim_ws = TRUE)
library(readr)
X2020_05_22_deces_quotidiens_departement_csv <- read_delim("2020-05-22_deces_quotidiens_departement_csv.csv",
";", escape_double = FALSE, col_types = cols(Date_evenement = col_character()),
trim_ws = TRUE)
View(X2020_05_22_deces_quotidiens_departement_csv)
?lubridate::dmy
data_daily_2018_2020$Date_evenement <- paste0(data_daily_2018_2020$Date_evenement, "-2020")
View(data_daily_2018_2020)
data_daily_2018_2020 <- data_daily_2018_2020 %>%
filter(Zone == "France") %>% mutate(date = lubridate::dmy(Date_evenement),
week = lubridate::week(date))
data_daily_2018_2020 <- data_daily_2018_2020 %>%
filter(Zone == "France") %>% mutate(date = lubridate::dmy(Date_evenement,
locale = Sys.setlocale(category = "LC_TIME",
locale = "fr")),
week = lubridate::week(date))
data_daily_2018_2020 <- data_daily_2018_2020 %>%
filter(Zone == "France") %>% mutate(date = lubridate::dmy(Date_evenement,
locale = Sys.setlocale(category = "LC_TIME",
locale = "fr_FR.UTF-8")),
week = lubridate::week(date))
data_daily_2018_2020 <- data_daily_2018_2020 %>%
filter(Zone == "France") %>% mutate(date = lubridate::dmy(Date_evenement,
locale = Sys.setlocale(category = "LC_TIME",
locale = "fr_FR.utf8")),
week = lubridate::week(date))
data_daily_2018_2020 <- read_delim("2020-05-22_deces_quotidiens_departement_csv.csv",
";", escape_double = FALSE, trim_ws = TRUE)
data_daily_2018_2020$Date_evenement <- paste0(data_daily_2018_2020$Date_evenement, "-2020")
data_daily_2018_2020 <- data_daily_2018_2020 %>%
filter(Zone == "France") %>% mutate(date = lubridate::dmy(Date_evenement,
locale = Sys.setlocale(category = "LC_TIME",
locale = "fr_FR.utf8")),
week = lubridate::week(date))
data_daily_2018_2020 <- data_daily_2018_2020 %>%
filter(Zone == "France") %>% mutate(date = lubridate::dmy(Date_evenement,
locale = Sys.setlocale("LC_TIME",
"fr_FR.utf8")),
week = lubridate::week(date))
system("locale -a")
system("locale -a")
data_daily_2018_2020 <- data_daily_2018_2020 %>%
filter(Zone == "France") %>% mutate(date = lubridate::dmy(Date_evenement,
locale = Sys.setlocale("LC_TIME",
"fr_FR.utf8")),
week = lubridate::week(date))
