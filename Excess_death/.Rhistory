xlab("p") + ylab("Prior density")
#Geometric model
alpha_prior = 61
beta_prior = 299
support <- tibble(x = c(0.05,0.3))
ggplot() +
stat_function(
data = support, mapping = aes(x),
fun = dbeta,
args = list(shape1 = alpha_prior, shape2 = beta_prior),
size = 0.7
) + geom_vline(xintercept = c(1/7,1/5),linetype = "dashed") +
xlab("p") + ylab("Prior density")
# libraries
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(kableExtra)
#Poisson model
k_prior = 50
theta_prior = 0.1
support <- tibble(x = c(2,8))
ggplot() +
stat_function(
data = support, mapping = aes(x),
fun = dgamma,
args = list(shape = k_prior, scale = theta_prior),
size = 0.7
) + geom_vline(xintercept = c(4,6),linetype = "dashed") +
xlab("lambda") + ylab("Prior density")
#Geometric model
alpha_prior = 61
beta_prior = 299
support <- tibble(x = c(0.05,0.3))
ggplot() +
stat_function(
data = support, mapping = aes(x),
fun = dbeta,
args = list(shape1 = alpha_prior, shape2 = beta_prior),
size = 0.7
) + geom_vline(xintercept = c(1/7,1/5),linetype = "dashed") +
xlab("p") + ylab("Prior density")
delta_lambda <- 0.1
lambda <- seq(0, 1000, delta_p)[-1]
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
#Observed counts
y <- c(1, 2, 2, 8, 10)
delta_lambda <- 0.1
lambda <- seq(0, 1000, delta_p)[-1]
lambda <- seq(0, 1000, delta_lambda)[-1]
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
likelihood_pois <- function(lambda) {
prod(dpois(y,lambda))
}
likelihood_pois_val <- map_dbl(lambda, ~likelihood_pois(.x))
sum(prior_lambda * likelihood_pois_val) * delta_p
sum(prior_lambda * likelihood_pois_val) * delta_lambda
prior_lambda
sum(prior_lambda * likelihood_pois_val) * delta_lambda
lambda_sim <- rgamma(1000000, shape = k_prior, scale = theta_prior)
prior_pred_pois <- rpois(1000000,lambda_sim)
dprior_pred_pois <- table(prior_pred_pois)/1000000
dprior_pred_pois <- tibble(val = as.numeric(names(dprior_pred_pois)),prob = as.numeric(dprior_pred_pois))
sum(prior_lambda * likelihood_pois_val) * delta_lambda
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
delta_lambda <- 0.1
lambda <- seq(0, 1000, delta_lambda)
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
# likelihood
likelihood_pois <- function(lambda) {
prod(dpois(y,lambda))
}
likelihood_pois_val <- map_dbl(lambda, ~likelihood_pois(.x))
sum(prior_lambda * likelihood_pois_val) * delta_lambda
lambda <- seq(0, 10000, delta_lambda)
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
# likelihood
likelihood_pois <- function(lambda) {
prod(dpois(y,lambda))
}
likelihood_pois_val <- map_dbl(lambda, ~likelihood_pois(.x))
sum(prior_lambda * likelihood_pois_val) * delta_lambda
lambda_sim <- rgamma(10000000, shape = k_prior, scale = theta_prior)
prior_pred_pois <- rpois(10000000,lambda_sim)
dprior_pred_pois <- table(prior_pred_pois)/10000000
dprior_pred_pois <- tibble(val = as.numeric(names(dprior_pred_pois)),prob = as.numeric(dprior_pred_pois))
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
delta_lambda <- 0.01
lambda <- seq(0, 1000, delta_lambda)
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
# likelihood
likelihood_pois <- function(lambda) {
prod(dpois(y,lambda))
}
likelihood_pois_val <- map_dbl(lambda, ~likelihood_pois(.x))
sum(prior_lambda * likelihood_pois_val) * delta_lambda
sum(prior_lambda * likelihood_pois_val) * delta_lambda
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
lambda_sim <- rgamma(10000000, shape = k_prior, scale = theta_prior)
prior_pred_pois <- rpois(10000000,lambda_sim)
dprior_pred_pois <- table(prior_pred_pois)/10000000
dprior_pred_pois <- tibble(val = as.numeric(names(dprior_pred_pois)),prob = as.numeric(dprior_pred_pois))
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
max(lambda_sim)
#Observed counts
y <- c(1, 2, 2, 8, 10)
delta_lambda <- 0.01
lambda <- seq(0, 1000, delta_lambda)
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
# likelihood
likelihood_pois <- function(lambda) {
prod(dpois(y,lambda))
}
likelihood_pois_val <- map_dbl(lambda, ~likelihood_pois(.x))
sum(prior_lambda * likelihood_pois_val) * delta_lambda
lambda_sim <- rgamma(10000000, shape = k_prior, scale = theta_prior)
prior_pred_pois <- rpois(10000000,lambda_sim)
dprior_pred_pois <- table(prior_pred_pois)/10000000
dprior_pred_pois <- tibble(val = as.numeric(names(dprior_pred_pois)),prob = as.numeric(dprior_pred_pois))
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]
dprior_pred_pois[dprior_pred_pois$val==2,"prob"]
dprior_pred_pois[dprior_pred_pois$val==8,"prob"]
dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
lambda <- seq(0, 1000, delta_lambda)
lambda <- seq(0.01, 1000, delta_lambda)
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
# likelihood
likelihood_pois <- function(lambda) {
prod(dpois(y,lambda))
}
likelihood_pois_val <- map_dbl(lambda, ~likelihood_pois(.x))
sum(prior_lambda * likelihood_pois_val) * delta_lambda
lambda_sim <- rgamma(10000000, shape = k_prior, scale = theta_prior)
sum(prior_lambda * likelihood_pois_val* delta_lambda)
#### Geometric model
delta_p <- 0.0001
p <- seq(0, 1, delta_p)[-1]
# Prior distribution discreticized
prior_p <- dbeta(p, shape1 = alpha_prior, shape2 = beta_prior)
# likelihood
likelihood_geom <- function(p) {
prod(dgeom(y,p))
}
likelihood_geom_val <- map_dbl(p, ~likelihood_geom(.x))
#
sum(prior_p * likelihood_geom_val) * delta_p
p_sim <- rbeta(1000000, shape1 = alpha_prior, shape2 = beta_prior)
prior_pred_geom <- rgeom(1000000,p_sim)
dprior_pred_geom <- table(prior_pred_geom)/1000000
dprior_pred_geom <- tibble(val = as.numeric(names(dprior_pred_geom)),prob = as.numeric(dprior_pred_geom))
dprior_pred_geom[dprior_pred_geom$val==1,"prob"]*dprior_pred_geom[dprior_pred_geom$val==2,"prob"]*dprior_pred_geom[dprior_pred_geom$val==2,"prob"]*dprior_pred_geom[dprior_pred_geom$val==8,"prob"]*dprior_pred_geom[dprior_pred_geom$val==10,"prob"]
lambda_sim <- rgamma(10000000, shape = k_prior, scale = theta_prior)
prior_pred_pois <- rpois(10000000,lambda_sim)
dprior_pred_pois <- table(prior_pred_pois)/10000000
dprior_pred_pois <- tibble(val = as.numeric(names(dprior_pred_pois)),prob = as.numeric(dprior_pred_pois))
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
table(prior_pred_pois)/10000000
prior_lambda
likelihood_pois_val
dprior_pred_pois
sum(dprior_pred_pois)
sum(dprior_pred_pois$prob)
View(dprior_pred_pois)
#Observed counts
y <- c(1, 2, 2, 8, 10)
delta_lambda <- 0.01
lambda <- seq(0.01, 1000, delta_lambda)
# Prior distribution discreticized
prior_lambda <- dgamma(lambda, shape = k_prior, scale = theta_prior)
# likelihood
likelihood_pois <- function(lambda) {
prod(dpois(y,lambda))
}
likelihood_pois_val <- map_dbl(lambda, ~likelihood_pois(.x))
sum(prior_lambda * likelihood_pois_val* delta_lambda)
2*sum(prior_lambda * likelihood_pois_val* delta_lambda)
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]
lambda_sim <- rgamma(1000000, shape = k_prior, scale = theta_prior)
prior_pred_pois <- rpois(1000000,lambda_sim)
dprior_pred_pois <- table(prior_pred_pois)/1000000
dprior_pred_pois <- tibble(val = as.numeric(names(dprior_pred_pois)),prob = as.numeric(dprior_pred_pois))
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
prior_lambda
sum(prior_lambda * likelihood_pois_val* delta_lambda)
lambda_sim <- rgamma(1000000, shape = k_prior, scale = theta_prior)
prior_pred_pois <- rpois(1000000,lambda_sim)
dprior_pred_pois <- table(prior_pred_pois)/1000000
dprior_pred_pois <- tibble(val = as.numeric(names(dprior_pred_pois)),prob = as.numeric(dprior_pred_pois))
dprior_pred_pois[dprior_pred_pois$val==1,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==2,"prob"]*dprior_pred_pois[dprior_pred_pois$val==8,"prob"]*dprior_pred_pois[dprior_pred_pois$val==10,"prob"]
#### Geometric model
delta_p <- 0.0001
p <- seq(0, 1, delta_p)[-1]
# Prior distribution discreticized
prior_p <- dbeta(p, shape1 = alpha_prior, shape2 = beta_prior)
# likelihood
likelihood_geom <- function(p) {
prod(dgeom(y,p))
}
likelihood_geom_val <- map_dbl(p, ~likelihood_geom(.x))
#
sum(prior_p * likelihood_geom_val) * delta_p
p_sim <- rbeta(1000000, shape1 = alpha_prior, shape2 = beta_prior)
prior_pred_geom <- rgeom(1000000,p_sim)
dprior_pred_geom <- table(prior_pred_geom)/1000000
dprior_pred_geom <- tibble(val = as.numeric(names(dprior_pred_geom)),prob = as.numeric(dprior_pred_geom))
dprior_pred_geom[dprior_pred_geom$val==1,"prob"]*dprior_pred_geom[dprior_pred_geom$val==2,"prob"]*dprior_pred_geom[dprior_pred_geom$val==2,"prob"]*dprior_pred_geom[dprior_pred_geom$val==8,"prob"]*dprior_pred_geom[dprior_pred_geom$val==10,"prob"]
#Observed counts
y <- c(1, 2, 2, 8, 10)
delta_lambda <- 0.01
lambda <- seq(0.01, 1000000, delta_lambda)
library(devtools)
devtools::install_github("rstudio/keras")
install.packages("devtools")
devtools::install_github("rstudio/keras")
library(kesa)
library(keras)
install_keras()
n
library(reticulate)
py_config()
seq(1:7)*2
setwd("~/Documents/MESIO/Omics Data/Block 2 - RNA Seq/Week 2/Task_1")
# libraries
if (!requireNamespace("GO.db", quietly = TRUE)){
BiocManager::install("GO.db")
}
if (!requireNamespace("Glimma", quietly = TRUE)){
BiocManager::install("Glimma")
}
if (!requireNamespace("org.Mm.eg.db", quietly = TRUE)){
BiocManager::install("org.Mm.eg.db")
}
if (!requireNamespace("edgeR", quietly = TRUE)){
BiocManager::install("edgeR")
}
library(edgeR)
library(limma)
library(Glimma)
library(gplots)
library(AnnotationDbi)
library(org.Mm.eg.db)
library(RColorBrewer)
library(edgeR)
library(limma)
library(kableExtra)
library(tidyverse)
# data
load("dataset5_eset.RData")
# working directory
setwd("~/Documents/MESIO/Omics Data/Block 2 - RNA Seq/Week 2/Task_1")
seqdata <- read.table("dataset5_count_table.txt", header=TRUE, sep="\t")
sampleinfo <- gilad.eset@phenoData@data
features_list <- gilad.eset@featureData@data
sampleinfo
# Which values in myCPM are greater than t?
thresh <- myCPM > thresh_val
table(rowSums(thresh))
# Obtain CPMs : Calculate counts-per-million (cpm) (not log scale)
myCPM <- cpm(countdata)
# Remove first two columns from seqdata
countdata <- seqdata[,-1]
# Store ENSEMBL GeneID as rownames
rownames(countdata) <- seqdata[,1]
# Now take a look at the column names
colnames(countdata)
# Obtain CPMs : Calculate counts-per-million (cpm) (not log scale)
myCPM <- cpm(countdata)
thresh_val <- 10*1000000/min(colSums(countdata))
# Which values in myCPM are greater than t?
thresh <- myCPM > thresh_val
table(rowSums(thresh))
thresh <- myCPM > mean(1,thresh_val)
table(rowSums(thresh))
# we would like to keep genes that have at least 3 TRUES in each row of thresh
keep <- rowSums(thresh) >= 3
# Subset the rows of countdata to keep the more highly expressed genes
counts.keep <- countdata[keep,]
y <- DGEList(counts.keep)
y$samples
# Get log2 counts per million
logcounts <- cpm(y,log=TRUE)
# Check distributions of samples using boxplots
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2,
main = "Fig.6 Boxplots of logCPMs (before normalization)")
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
pr <-data.frame(prcomp(t(logcounts),scale. = FALSE)$x)
# Set up colour vector for celltype variable
col.cell <- c("purple","orange")[sampleinfo$gender]
## Let's choose purple for females and orange for males
col.gender <- c("purple","orange")[sampleinfo$gender]
pr2 <- ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=col.gender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id)) +
labs(colour="Group") +
theme(legend.position = "bottom")
pr2
pr2 <- ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=col.gender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id),nudge_x=5) +
labs(colour="Group") +
theme(legend.position = "bottom")
pr2
pr2 <- ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=col.gender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id),nudge_x=5,nudge_y=5) +
labs(colour="Group") +
theme(legend.position = "bottom")
pr2
pr2 <- ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=col.gender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id),nudge_x=15,nudge_y=15) +
labs(colour="Group") +
theme(legend.position = "bottom")
pr2
pr2 <- ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfogender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id),nudge_x=15,nudge_y=15) +
labs(colour="Group") +
theme(legend.position = "bottom")
pr2
pr2 <- ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id),nudge_x=15,nudge_y=15) +
labs(colour="Group") +
theme(legend.position = "bottom")
pr2
pr2 <- ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id),nudge_x=10,nudge_y=5) +
labs(colour="Group") +
theme(legend.position = "bottom")
pr2
pr2 <- ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id),nudge_x=5,nudge_y=10) +
labs(colour="Group") +
theme(legend.position = "bottom")
pr2
pr2 <- ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id),nudge_x=5,nudge_y=15) +
labs(colour="Group") +
theme(legend.position = "bottom")
pr2
pr2 <- ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id),nudge_x=5,nudge_y=15) +
labs(colour="Group") +
xlim(c(-30,60)) +
theme(legend.position = "bottom")
pr2
pr2 <- ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id),nudge_x=5,nudge_y=15) +
labs(colour="Group") +
xlim(c(-35,60)) +
theme(legend.position = "bottom")
pr2
sampleinfo
# We estimate the variance for each row in the logcounts matrix
var_genes <- apply(logcounts, 1, var)
# Get the gene names for the top 500 most variable genes
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
# Subset logcounts matrix
highly_variable_lcpm <- logcounts[select_var,]
# PCA
pr <-data.frame(prcomp(t(highly_variable_lcpm),scale. = FALSE)$x)
pr2 <- ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id),nudge_x=5,nudge_y=15) +
labs(colour="Group") +
xlim(c(-35,60)) +
theme(legend.position = "bottom")
pr2
pr2 <- ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id),nudge_x=5,nudge_y=1) +
labs(colour="Group") +
xlim(c(-35,60)) +
theme(legend.position = "bottom")
pr2 <- ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id),nudge_x=5,nudge_y=10) +
labs(colour="Group") +
xlim(c(-35,60)) +
theme(legend.position = "bottom")
pr2
5
pr2 <- ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id),nudge_x=5,nudge_y=15) +
labs(colour="Group") +
xlim(c(-35,60)) +
theme(legend.position = "bottom")
pr2
sampleinfo
# PCA
pr <-data.frame(prcomp(t(highly_variable_lcpm[,3]),scale. = FALSE)$x)
ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender)) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id),nudge_x=5,nudge_y=15) +
labs(colour="Group") +
xlim(c(-35,60)) +
theme(legend.position = "bottom")
# PCA
pr <-data.frame(prcomp(t(highly_variable_lcpm[,3]),scale. = FALSE)$x)
ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender[-3])) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id[-3]),nudge_x=5,nudge_y=15) +
labs(colour="Group") +
xlim(c(-35,60)) +
theme(legend.position = "bottom")
# PCA
pr <-data.frame(prcomp(t(highly_variable_lcpm[,3]),scale. = FALSE)$x)
ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender[-3])) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id[-3]),nudge_x=5,nudge_y=15) +
labs(colour="Group") +
xlim(c(-35,60)) +
theme(legend.position = "bottom")
t(highly_variable_lcpm[,3])
# PCA
pr <-data.frame(prcomp(t(highly_variable_lcpm[,-3]),scale. = FALSE)$x)
ggplot(pr) + geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender[-3])) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id[-3]),nudge_x=5,nudge_y=15) +
labs(colour="Group") +
xlim(c(-35,60)) +
theme(legend.position = "bottom")
sampleinfo
# PCA
pr <-data.frame(prcomp(t(highly_variable_lcpm[,-c(3,4)]),scale. = FALSE)$x)
ggplot(pr) + geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender[-c(3,4)])) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id[-c(3,4)]),nudge_x=5,nudge_y=15) +
labs(colour="Group") +
xlim(c(-35,60)) +
theme(legend.position = "bottom")
# We estimate the variance for each row in the logcounts matrix
var_genes <- apply(logcounts[,-c(3,4)], 1, var)
# Get the gene names for the top 500 most variable genes
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
# Subset logcounts matrix
highly_variable_lcpm <- logcounts[select_var,-c(3,4)]
# PCA
pr <-data.frame(prcomp(t(highly_variable_lcpm),scale. = FALSE)$x)
ggplot(pr) + geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender[-c(3,4)])) +
geom_label(aes(x=PC1,y=PC2,label=sampleinfo$sample.id[-c(3,4)]),nudge_x=5,nudge_y=15) +
labs(colour="Group") +
xlim(c(-35,60)) +
theme(legend.position = "bottom")
# PCA
pr <-data.frame(prcomp(t(highly_variable_lcpm),scale. = TRUE)$x)
ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender)) +
geom_label(aes(x=PC1,y=PC2,label=short_labels),nudge_x=0,nudge_y=5) +
labs(colour="Group") +
xlim(c(-35,60)) +
theme(legend.position = "bottom") +
ggtitle("Fig.9 Principal Component Analysis ")
# PCA
pr <-data.frame(prcomp(t(highly_variable_lcpm),scale. = TRUE)$x)
# Shortened labels for samples
short_labels <- sapply(colnames(y),gsub, pattern="SRX0148", replacement="")
ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender)) +
geom_label(aes(x=PC1,y=PC2,label=short_labels),nudge_x=0,nudge_y=5) +
labs(colour="Group") +
xlim(c(-35,60)) +
theme(legend.position = "bottom") +
ggtitle("Fig.9 Principal Component Analysis ")
# We estimate the variance for each row in the logcounts matrix
var_genes <- apply(logcounts, 1, var)
# Get the gene names for the top 500 most variable genes
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
# Subset logcounts matrix
highly_variable_lcpm <- logcounts[select_var,]
## Get some nicer colours
mypalette <- brewer.pal(11,"RdYlBu")
# PCA
pr <-data.frame(prcomp(t(highly_variable_lcpm),scale. = TRUE)$x)
ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender)) +
geom_label(aes(x=PC1,y=PC2,label=short_labels),nudge_x=0,nudge_y=5) +
labs(colour="Group") +
xlim(c(-35,60)) +
theme(legend.position = "bottom") +
ggtitle("Fig.9 Principal Component Analysis ")
ggplot(pr) +
geom_point(aes(x=PC1,y=PC2,color=sampleinfo$gender)) +
geom_label(aes(x=PC1,y=PC2,label=short_labels),nudge_x=0,nudge_y=2) +
labs(colour="Group") +
xlim(c(-35,60)) +
theme(legend.position = "bottom") +
ggtitle("Fig.9 Principal Component Analysis ")
setwd("~/Documents/MESIO/Bayesian Analysis/UPC-Final-Project-Bayesian-Analysis/Excess_death")
# libraries
library(rstan)
library(ggplot2)
library(tidyr)
library(kableExtra)
library(tidyverse)
library(gridExtra)
library(bayesplot)
data_netherland<- read.csv("data/Death_week_2_17_netherland.csv", sep = ";")
