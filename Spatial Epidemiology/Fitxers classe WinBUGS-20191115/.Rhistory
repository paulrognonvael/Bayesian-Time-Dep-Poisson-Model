annotate("text",x=c(-Inf,Inf),y=c(Inf,Inf),hjust=c(0,1),vjust=c(1,1),label=annotateText,size = 3)+
theme(legend.position = "bottom")+
annotate("segment", x = score-5, xend = score, y =0.2*max(emp.d), yend =0.2*max(emp.d), colour = "black", size=0.5,arrow=arrow(angle = 25, length = unit(0.3, units = "cm")))+
annotate("label", x = score-7, y =0.2*max(emp.d)+0.0005, label="Score", size=3,fill="white")
print(g)
#Optional summary of shuffling scores distribution
if(summary.dist.score==TRUE){
s_allscore<-summary(randallscore)
cat("\nSummary of shuffling scores distribution:","\n")
print(s_allscore)
}
#Printing Gumbel fit output
cat("\nGumbel fit parameters:\n")
cat(paste(names(gumbel.param),sapply(gumbel.param,formatgraph),sep = ": ", collapse = "\n"),"\n")
#Printing raw,std score and std gumbel p-value
scoredata<-c(score,std.S,gumbel.p.value)
cat("\nScores and p-value:\n")
cat(paste(c("Score","Std Gumbel Score", "Std Gumbel p-value"),c(score,round(std.S,2),formatgraph(gumbel.p.value)),sep = ": ", collapse = "\n"),"\n")
#return of outputs whithout printing when run
invisible(list(score=score,std.score=std.S,plot=g,gumbel.fit=gumbel.param,emp.p.value=emp.p.value,gumbel.p.value=gumbel.p.value))
}
path="C:/Users/javra/Documents/MESIO/Bioinformatica/Task 1&2"
as<-alignment.stat(
sequence1=paste(path,"gi32141095_N_1.fa",sep="/"),
sequence2=paste(path,"gi32141095_N_0.fa",sep="/"),
type_seq="DNA",
alignment="local",
submatrix="BLOSUM50",
gapOpenPenal=-5,
gapExtPenal=-1,
N=1000,
shuffled=1)
registros<-readDNAStringSet(paste(path,"gi32141095_N_1.fa",sep="/"))
library(devtools)
ls()
library(alignmentStat)
path="C:/Users/javra/Documents/MESIO/Bioinformatica/Task 1&2"
as<-alignment.stat(
sequence1=paste(path,"gi32141095_N_1.fa",sep="/"),
sequence2=paste(path,"gi32141095_N_0.fa",sep="/"),
type_seq="DNA",
alignment="local",
submatrix="BLOSUM50",
gapOpenPenal=-5,
gapExtPenal=-1,
N=1000,
shuffled=1)
library(Biostrings)
registros<-readDNAStringSet(paste(path,"gi32141095_N_1.fa",sep="/"))
nchar(registros)
detach("package:Biostrings", unload = TRUE)
registros<-readDNAStringSet(paste(path,"gi32141095_N_1.fa",sep="/"))
nchar(readDNAStringSet(paste(path,"gi32141095_N_1.fa",sep="/")))
library(alignmentStat)
path="C:/Users/javra/Documents/MESIO/Bioinformatica/Task 1&2"
as<-alignment.stat(
sequence1=paste(path,"gi32141095_N_1.fa",sep="/"),
sequence2=paste(path,"gi32141095_N_0.fa",sep="/"),
type_seq="DNA",
alignment="local",
submatrix="BLOSUM50",
gapOpenPenal=-5,
gapExtPenal=-1,
N=1000,
shuffled=1)
as$gumbel.p.value
as$emp.p.value
as$gumbel.fit
as$std.score
as$score
library(Biostrings)
library(seqinr)
alignment.stat<-function(
sequence1,
sequence2,
type_seq,
alignment,
submatrix,
gapOpenPenal,
gapExtPenal,
N,
shuffled,
summary.dist.score=TRUE){
#Biostrings read and string functions depending on the type of sequence
if(type_seq=="DNA"){
read.sequence=readDNAStringSet
to.string.sequence=DNAString
} else {
if (type_seq=="protein") {
read.sequence=readAAStringSet
to.string.sequence=AAString
} else {
stop("Type of sequence not recognized")
}
}
sequence1<-read.sequence(sequence1)
sequence2<-read.sequence(sequence2)
n1<-nchar(sequence1)
n2<-nchar(sequence2)
#Raw score from pairwise alignmnt
score<-pairwiseAlignment(sequence1,
sequence2,
type=alignment,
substitutionMatrix = submatrix,
gapOpening = gapOpenPenal,
gapExtension = gapExtPenal,
scoreOnly = TRUE)
#Shuffling starts here
randallscore <- numeric(N)
seq_shuffled<-get(paste0("sequence",shuffled))
n_shuffled<-nchar(seq_shuffled)
#the squence to shuffle is split into individual characters which form the set to permute
sample_charac_to_permute<-strsplit(toString(seq_shuffled),split="")[[1]]
#Scores obtained through shuffling
for (i in 1:N) {
x <- c2s(sample(sample_charac_to_permute,n_shuffled, replace=FALSE))
randallscore[i] <- pairwiseAlignment(to.string.sequence(x),
seq_shuffled,
type=alignment,
substitutionMatrix = submatrix,
gapOpening = gapOpenPenal,
gapExtension = gapExtPenal,
scoreOnly = TRUE)
}
randallscore<-sort(randallscore,decreasing = FALSE)
#Computation of the cdf and pdf of the discrete distribution on shuffling scores
masses<-sort(unique(randallscore))
e.cdf<-numeric(length(masses))
for (i in 1:length(masses)){
e.cdf[i]<-sum(randallscore<=masses[i])/N
}
emp.d<-e.cdf-c(0,e.cdf[1:(length(e.cdf)-1)])
emp.dist<-data.frame(Score=masses,CDF=e.cdf,PDF=emp.d)
#Computation of empirical e.value and p.value from the discrete distribution of shuffling scores
emp.p.value<-sum(emp.dist[emp.dist$Score>score,"PDF"])
emp.dist$weighted.score<-with(emp.dist,Score*PDF)
emp.e.value<-sum(emp.dist[emp.dist$Score>score,"weighted.score"])
#Standardized Gumbel scores and p-value fromGumbel distribution fitted on shuffling score sample
gumbel.param<-gumbel.score.fit(randallscore,n1,n2)
std.S<-c(std.S=gumbel.param['lambda']*score-log(gumbel.param['K']*n1*n2))
gumbel.p.value<-c(gumbel.p.value=1-exp(-exp(-std.S)))
#Gumbel fitted density to plot
dgumbel <- function(x) {gumbel.param['lambda']*exp(-gumbel.param['lambda']*(x-gumbel.param['u'])-exp(-gumbel.param['lambda']*(x-gumbel.param['u'])))}
df<-data.frame(randallscore)
#definition of the formating for numbers in output
formatgraph<-function(x){formatC(x, format = "e", digits = 2)}
#Text to add to plot
annotateText <- c(paste0("Sequence 1: ", substr(names(sequence1),1,15),"\n",
"Sequence 2: ", substr(names(sequence2),1,15),"\n",
"Type: ",type_seq,"\n",
"Alignment: ",alignment,"\n",
"Matrix: ",submatrix,"\n",
"Gap opening: ",gapOpenPenal,"\n",
"Gap extension: ",gapExtPenal,"\n",
"Samples: ",N,"\n",
"Shuffled: ",shuffled,"\n"),
paste0("Score: ",score,"\n",
"Std score: ",round(std.S,2),"\n",
"lambda: ",formatgraph(gumbel.param['lambda']),"\n",
"u: ",formatgraph(gumbel.param['u']),"\n",
"K: ",formatgraph(gumbel.param['K']),"\n",
"Emp. p-value: ",formatgraph(emp.p.value),"\n",
"Emp. e-value: ",formatgraph(emp.e.value),"\n",
"Std Gumbel p-value: ",formatgraph(gumbel.p.value),"\n"))
g<-ggplot(df,aes(x=randallscore))+
geom_histogram(aes(y=..density..,fill="Frequency\nhistogram"), bins=30,colour="black")+
geom_density(aes(colour="Kernel Smoothing\ndensity"), adjust=4,size=1)+
stat_function(fun = dgumbel, aes(colour = "Gumbel fit"),size=1)+
geom_vline(xintercept = score,aes(colour = "black"),linetype="dashed")+
theme_bw()+
scale_colour_manual(name="Lines",values=c("Gumbel fit"="red", "Kernel Smoothing\ndensity"="green"))+
scale_fill_manual(name = "", values = c("Frequency\nhistogram" = "blue"))+
xlab("Density")+
ylab("Score")+
annotate("text",x=c(-Inf,Inf),y=c(Inf,Inf),hjust=c(0,1),vjust=c(1,1),label=annotateText,size = 3)+
theme(legend.position = "bottom")+
annotate("segment", x = score-5, xend = score, y =0.2*max(emp.d), yend =0.2*max(emp.d), colour = "black", size=0.5,arrow=arrow(angle = 25, length = unit(0.3, units = "cm")))+
annotate("label", x = score-7, y =0.2*max(emp.d)+0.0005, label="Score", size=3,fill="white")
print(g)
#Optional summary of shuffling scores distribution
if(summary.dist.score==TRUE){
s_allscore<-summary(randallscore)
cat("\nSummary of shuffling scores distribution:","\n")
print(s_allscore)
}
#Printing Gumbel fit output
cat("\nGumbel fit parameters:\n")
cat(paste(names(gumbel.param),sapply(gumbel.param,formatgraph),sep = ": ", collapse = "\n"),"\n")
#Printing raw,std score and std gumbel p-value
scoredata<-c(score,std.S,gumbel.p.value)
cat("\nScores and p-value:\n")
cat(paste(c("Score","Std Gumbel Score", "Std Gumbel p-value"),c(score,round(std.S,2),formatgraph(gumbel.p.value)),sep = ": ", collapse = "\n"),"\n")
#return of outputs whithout printing when run
invisible(list(score=score,std.score=std.S,plot=g,gumbel.fit=gumbel.param,emp.p.value=emp.p.value,gumbel.p.value=gumbel.p.value))
}
path="C:/Users/javra/Documents/MESIO/Bioinformatica/Task 1&2"
as<-alignment.stat(
sequence1=paste(path,"gi32141095_N_1.fa",sep="/"),
sequence2=paste(path,"gi32141095_N_0.fa",sep="/"),
type_seq="DNA",
alignment="local",
submatrix="BLOSUM50",
gapOpenPenal=-5,
gapExtPenal=-1,
N=1000,
shuffled=1)
rm(as)
library(Biostrings)
library(seqinr)
alignment.stat<-function(
sequence1,
sequence2,
type_seq,
alignment,
submatrix,
gapOpenPenal,
gapExtPenal,
N,
shuffled,
summary.dist.score=TRUE){
#Biostrings read and string functions depending on the type of sequence
if(type_seq=="DNA"){
read.sequence=readDNAStringSet
to.string.sequence=DNAString
} else {
if (type_seq=="protein") {
read.sequence=readAAStringSet
to.string.sequence=AAString
} else {
stop("Type of sequence not recognized")
}
}
sequence1<-read.sequence(sequence1)
sequence2<-read.sequence(sequence2)
n1<-nchar(sequence1)
n2<-nchar(sequence2)
#Raw score from pairwise alignmnt
score<-pairwiseAlignment(sequence1,
sequence2,
type=alignment,
substitutionMatrix = submatrix,
gapOpening = gapOpenPenal,
gapExtension = gapExtPenal,
scoreOnly = TRUE)
#Shuffling starts here
randallscore <- numeric(N)
seq_shuffled<-get(paste0("sequence",shuffled))
n_shuffled<-nchar(seq_shuffled)
#the squence to shuffle is split into individual characters which form the set to permute
sample_charac_to_permute<-strsplit(toString(seq_shuffled),split="")[[1]]
#Scores obtained through shuffling
for (i in 1:N) {
x <- c2s(sample(sample_charac_to_permute,n_shuffled, replace=FALSE))
randallscore[i] <- pairwiseAlignment(to.string.sequence(x),
seq_shuffled,
type=alignment,
substitutionMatrix = submatrix,
gapOpening = gapOpenPenal,
gapExtension = gapExtPenal,
scoreOnly = TRUE)
}
randallscore<-sort(randallscore,decreasing = FALSE)
#Computation of the cdf and pdf of the discrete distribution on shuffling scores
masses<-sort(unique(randallscore))
e.cdf<-numeric(length(masses))
for (i in 1:length(masses)){
e.cdf[i]<-sum(randallscore<=masses[i])/N
}
emp.d<-e.cdf-c(0,e.cdf[1:(length(e.cdf)-1)])
emp.dist<-data.frame(Score=masses,CDF=e.cdf,PDF=emp.d)
#Computation of empirical e.value and p.value from the discrete distribution of shuffling scores
emp.p.value<-sum(emp.dist[emp.dist$Score>score,"PDF"])
emp.dist$weighted.score<-with(emp.dist,Score*PDF)
emp.e.value<-sum(emp.dist[emp.dist$Score>score,"weighted.score"])
#Standardized Gumbel scores and p-value fromGumbel distribution fitted on shuffling score sample
gumbel.param<-gumbel.score.fit(randallscore,n1,n2)
std.S<-c(std.S=gumbel.param['lambda']*score-log(gumbel.param['K']*n1*n2))
gumbel.p.value<-c(gumbel.p.value=1-exp(-exp(-std.S)))
#Gumbel fitted density to plot
dgumbel <- function(x) {gumbel.param['lambda']*exp(-gumbel.param['lambda']*(x-gumbel.param['u'])-exp(-gumbel.param['lambda']*(x-gumbel.param['u'])))}
df<-data.frame(randallscore)
#definition of the formating for numbers in output
formatgraph<-function(x){formatC(x, format = "e", digits = 2)}
#Text to add to plot
annotateText <- c(paste0("Sequence 1: ", substr(names(sequence1),1,15),"\n",
"Sequence 2: ", substr(names(sequence2),1,15),"\n",
"Type: ",type_seq,"\n",
"Alignment: ",alignment,"\n",
"Matrix: ",submatrix,"\n",
"Gap opening: ",gapOpenPenal,"\n",
"Gap extension: ",gapExtPenal,"\n",
"Samples: ",N,"\n",
"Shuffled: ",shuffled,"\n"),
paste0("Score: ",score,"\n",
"Std score: ",round(std.S,2),"\n",
"lambda: ",formatgraph(gumbel.param['lambda']),"\n",
"u: ",formatgraph(gumbel.param['u']),"\n",
"K: ",formatgraph(gumbel.param['K']),"\n",
"Emp. p-value: ",formatgraph(emp.p.value),"\n",
"Emp. e-value: ",formatgraph(emp.e.value),"\n",
"Std Gumbel p-value: ",formatgraph(gumbel.p.value),"\n"))
g<-ggplot(df,aes(x=randallscore))+
geom_histogram(aes(y=..density..,fill="Frequency\nhistogram"), bins=30,colour="black")+
geom_density(aes(colour="Kernel Smoothing\ndensity"), adjust=4,size=1)+
stat_function(fun = dgumbel, aes(colour = "Gumbel fit"),size=1)+
geom_vline(xintercept = score,aes(colour = "black"),linetype="dashed")+
theme_bw()+
scale_colour_manual(name="Lines",values=c("Gumbel fit"="red", "Kernel Smoothing\ndensity"="green"))+
scale_fill_manual(name = "", values = c("Frequency\nhistogram" = "blue"))+
xlab("Density")+
ylab("Score")+
annotate("text",x=c(-Inf,Inf),y=c(Inf,Inf),hjust=c(0,1),vjust=c(1,1),label=annotateText,size = 3)+
theme(legend.position = "bottom")+
annotate("segment", x = score-5, xend = score, y =0.2*max(emp.d), yend =0.2*max(emp.d), colour = "black", size=0.5,arrow=arrow(angle = 25, length = unit(0.3, units = "cm")))+
annotate("label", x = score-7, y =0.2*max(emp.d)+0.0005, label="Score", size=3,fill="white")
print(g)
#Optional summary of shuffling scores distribution
if(summary.dist.score==TRUE){
s_allscore<-summary(randallscore)
cat("\nSummary of shuffling scores distribution:","\n")
print(s_allscore)
}
#Printing Gumbel fit output
cat("\nGumbel fit parameters:\n")
cat(paste(names(gumbel.param),sapply(gumbel.param,formatgraph),sep = ": ", collapse = "\n"),"\n")
#Printing raw,std score and std gumbel p-value
scoredata<-c(score,std.S,gumbel.p.value)
cat("\nScores and p-value:\n")
cat(paste(c("Score","Std Gumbel Score", "Std Gumbel p-value"),c(score,round(std.S,2),formatgraph(gumbel.p.value)),sep = ": ", collapse = "\n"),"\n")
#return of outputs whithout printing when run
invisible(list(score=score,std.score=std.S,plot=g,gumbel.fit=gumbel.param,emp.p.value=emp.p.value,gumbel.p.value=gumbel.p.value))
}
path="C:/Users/javra/Documents/MESIO/Bioinformatica/Task 1&2"
as<-alignment.stat(
sequence1=paste(path,"gi32141095_N_1.fa",sep="/"),
sequence2=paste(path,"gi32141095_N_0.fa",sep="/"),
type_seq="DNA",
alignment="local",
submatrix="BLOSUM50",
gapOpenPenal=-5,
gapExtPenal=-1,
N=1000,
shuffled=1)
#library(alignmentStat)
library(Biostrings)
library(seqinr)
library(ggplot2)
alignment.stat<-function(
sequence1,
sequence2,
type_seq,
alignment,
submatrix,
gapOpenPenal,
gapExtPenal,
N,
shuffled,
summary.dist.score=TRUE){
#Biostrings read and string functions depending on the type of sequence
if(type_seq=="DNA"){
read.sequence=readDNAStringSet
to.string.sequence=DNAString
} else {
if (type_seq=="protein") {
read.sequence=readAAStringSet
to.string.sequence=AAString
} else {
stop("Type of sequence not recognized")
}
}
sequence1<-read.sequence(sequence1)
sequence2<-read.sequence(sequence2)
n1<-nchar(sequence1)
n2<-nchar(sequence2)
#Raw score from pairwise alignmnt
score<-pairwiseAlignment(sequence1,
sequence2,
type=alignment,
substitutionMatrix = submatrix,
gapOpening = gapOpenPenal,
gapExtension = gapExtPenal,
scoreOnly = TRUE)
#Shuffling starts here
randallscore <- numeric(N)
seq_shuffled<-get(paste0("sequence",shuffled))
n_shuffled<-nchar(seq_shuffled)
#the squence to shuffle is split into individual characters which form the set to permute
sample_charac_to_permute<-strsplit(toString(seq_shuffled),split="")[[1]]
#Scores obtained through shuffling
for (i in 1:N) {
x <- c2s(sample(sample_charac_to_permute,n_shuffled, replace=FALSE))
randallscore[i] <- pairwiseAlignment(to.string.sequence(x),
seq_shuffled,
type=alignment,
substitutionMatrix = submatrix,
gapOpening = gapOpenPenal,
gapExtension = gapExtPenal,
scoreOnly = TRUE)
}
randallscore<-sort(randallscore,decreasing = FALSE)
#Computation of the cdf and pdf of the discrete distribution on shuffling scores
masses<-sort(unique(randallscore))
e.cdf<-numeric(length(masses))
for (i in 1:length(masses)){
e.cdf[i]<-sum(randallscore<=masses[i])/N
}
emp.d<-e.cdf-c(0,e.cdf[1:(length(e.cdf)-1)])
emp.dist<-data.frame(Score=masses,CDF=e.cdf,PDF=emp.d)
#Computation of empirical e.value and p.value from the discrete distribution of shuffling scores
emp.p.value<-sum(emp.dist[emp.dist$Score>score,"PDF"])
emp.dist$weighted.score<-with(emp.dist,Score*PDF)
emp.e.value<-sum(emp.dist[emp.dist$Score>score,"weighted.score"])
#Standardized Gumbel scores and p-value fromGumbel distribution fitted on shuffling score sample
gumbel.param<-gumbel.score.fit(randallscore,n1,n2)
std.S<-c(std.S=gumbel.param['lambda']*score-log(gumbel.param['K']*n1*n2))
gumbel.p.value<-c(gumbel.p.value=1-exp(-exp(-std.S)))
#Gumbel fitted density to plot
dgumbel <- function(x) {gumbel.param['lambda']*exp(-gumbel.param['lambda']*(x-gumbel.param['u'])-exp(-gumbel.param['lambda']*(x-gumbel.param['u'])))}
df<-data.frame(randallscore)
#definition of the formating for numbers in output
formatgraph<-function(x){formatC(x, format = "e", digits = 2)}
#Text to add to plot
annotateText <- c(paste0("Sequence 1: ", substr(names(sequence1),1,15),"\n",
"Sequence 2: ", substr(names(sequence2),1,15),"\n",
"Type: ",type_seq,"\n",
"Alignment: ",alignment,"\n",
"Matrix: ",submatrix,"\n",
"Gap opening: ",gapOpenPenal,"\n",
"Gap extension: ",gapExtPenal,"\n",
"Samples: ",N,"\n",
"Shuffled: ",shuffled,"\n"),
paste0("Score: ",score,"\n",
"Std score: ",round(std.S,2),"\n",
"lambda: ",formatgraph(gumbel.param['lambda']),"\n",
"u: ",formatgraph(gumbel.param['u']),"\n",
"K: ",formatgraph(gumbel.param['K']),"\n",
"Emp. p-value: ",formatgraph(emp.p.value),"\n",
"Emp. e-value: ",formatgraph(emp.e.value),"\n",
"Std Gumbel p-value: ",formatgraph(gumbel.p.value),"\n"))
g<-ggplot(df,aes(x=randallscore))+
geom_histogram(aes(y=..density..,fill="Frequency\nhistogram"), bins=30,colour="black")+
geom_density(aes(colour="Kernel Smoothing\ndensity"), adjust=4,size=1)+
stat_function(fun = dgumbel, aes(colour = "Gumbel fit"),size=1)+
geom_vline(xintercept = score,aes(colour = "black"),linetype="dashed")+
theme_bw()+
scale_colour_manual(name="Lines",values=c("Gumbel fit"="red", "Kernel Smoothing\ndensity"="green"))+
scale_fill_manual(name = "", values = c("Frequency\nhistogram" = "blue"))+
xlab("Density")+
ylab("Score")+
annotate("text",x=c(-Inf,Inf),y=c(Inf,Inf),hjust=c(0,1),vjust=c(1,1),label=annotateText,size = 3)+
theme(legend.position = "bottom")+
annotate("segment", x = score-5, xend = score, y =0.2*max(emp.d), yend =0.2*max(emp.d), colour = "black", size=0.5,arrow=arrow(angle = 25, length = unit(0.3, units = "cm")))+
annotate("label", x = score-7, y =0.2*max(emp.d)+0.0005, label="Score", size=3,fill="white")
print(g)
#Optional summary of shuffling scores distribution
if(summary.dist.score==TRUE){
s_allscore<-summary(randallscore)
cat("\nSummary of shuffling scores distribution:","\n")
print(s_allscore)
}
#Printing Gumbel fit output
cat("\nGumbel fit parameters:\n")
cat(paste(names(gumbel.param),sapply(gumbel.param,formatgraph),sep = ": ", collapse = "\n"),"\n")
#Printing raw,std score and std gumbel p-value
scoredata<-c(score,std.S,gumbel.p.value)
cat("\nScores and p-value:\n")
cat(paste(c("Score","Std Gumbel Score", "Std Gumbel p-value"),c(score,round(std.S,2),formatgraph(gumbel.p.value)),sep = ": ", collapse = "\n"),"\n")
#return of outputs whithout printing when run
invisible(list(score=score,std.score=std.S,plot=g,gumbel.fit=gumbel.param,emp.p.value=emp.p.value,gumbel.p.value=gumbel.p.value))
}
path="C:/Users/javra/Documents/MESIO/Bioinformatica/Task 1&2"
as<-alignment.stat(
sequence1=paste(path,"gi32141095_N_1.fa",sep="/"),
sequence2=paste(path,"gi32141095_N_0.fa",sep="/"),
type_seq="DNA",
alignment="local",
submatrix="BLOSUM50",
gapOpenPenal=-5,
gapExtPenal=-1,
N=1000,
shuffled=1)
registros<-readDNAStringSet(paste(path,"gi32141095_N_1.fa",sep="/"))
nchar(registros)
as$std.score
a<-2*as$std.score
a
namesa(a)<-"loquequiero"
names(a)<-"loquequiero"
a
system("R CMD Rd2pdf alignmentStat")
install.packages("R2WinBUGS")
N <-56
O <- c(9,39,11,9,15,8,26,7,6,20, 13,5,3,8,17,9,2,7,9,7,16,31,11,7,19,15,7,10,16,11, 5,3,7,8,11, 9,11, 8,6,4,
10, 8,2,6,19,3,2,3,28,6,1,1,1,1,0,0)
E <- c( 1.4, 8.7, 3.0, 2.5, 4.3, 2.4, 8.1,2.3, 2.0, 6.6,4.4, 1.8, 1.1, 3.3,7.8, 4.6, 1.1,4.2,5.5, 4.4,
10.5,22.7,8.8,5.6,15.5,12.5,6.0,9.0,14.4,10.2,4.8,2.9,7.0, 8.5,12.3,10.1,12.7,9.4,7.2,5.3,
18.8,15.8,4.3,14.6,50.7,8.2,5.6,9.3,88.7,19.6,3.4,3.6,5.7,7.0,4.2,1.8)
X <- c(16,16,10,24,10,24,10, 7, 7,16, 7,16,10,24, 7,16,10, 7, 7,10, 7,16,10, 7, 1, 1, 7, 7,10,10,7,24,10, 7, 7, 0,10, 1,16, 0,1,16,16, 0, 1, 7, 1, 1, 0, 1,1, 0, 1, 1,16,10)
data.lips<-list(N=N,O=O,E=E,X=X/10)
#File with model
escocia.Poisson<-paste(getwd(),"//escocia-Poisson-model.odc",sep="")
escocia.inits<-list(
list(alpha0=0.00000E+00, alpha1=0.00000E+00),
list(alpha0=-5.00000E-01, alpha1=-2.00000E+00),
list(alpha0=rnorm(1),alpha1=rnorm(1))
)
#Define file
path.winbugs1<-paste("C:\\winbugs\\winbugs14_unrestricted\\WinBUGS14")
path.winbugs2<-paste("C:\\Software\\WinBUGS14") #path PC of UPC university
mybugsdir<-"D:\\demo_WinBugs\\"
setwd("~/MESIO/Epidemiologia Espacial/Parte 2 Lattice/Fitxers classe WinBUGS-20191115")
mybugsdir<-"~/MESIO/Epidemiologia Espacial/Parte 2 Lattice/Fitxers classe WinBUGS-20191115/R-Winbugs"
